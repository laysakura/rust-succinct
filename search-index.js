var N=null,E="",T="t",U="u",searchIndex={};
var R=["succinct_rs","loudsindex","loudsnodenum","Panics `node_num` does not exist in this LOUDS.","Returns the minimum position (0-origin) `i` where…","option","from_bit_string","bitstring","succinct_rs::bit_string","result","succinct_rs::louds","try_from","try_into","borrow_mut","type_id","borrow","typeid","succinct_rs::succinct_bit_vector","formatter","BitString","LoudsBuilder","LoudsIndex","LoudsNodeNum","SuccinctBitVector","SuccinctBitVectorBuilder"];
searchIndex["succinct_rs"]={"doc":"Succinct.rs","i":[[0,"bit_string",R[0],E,N,N],[3,R[19],R[8],"Provides validated string representation of bit sequence.",N,N],[11,"new",E,"Constructor.",0,[[["str"]],["self"]]],[11,"str",E,"Getter.",0,[[["self"]],["str"]]],[0,"louds",R[0],E,N,N],[3,"Louds",R[10],"LOUDS (Level-Order Unary Degree Sequence).",N,N],[3,R[20],E,"The builder of Louds.",N,N],[3,R[22],E,"Node number of Louds tree.",N,N],[3,R[21],E,"Index of Louds tree.",N,N],[11,"node_num_to_index",E,R[3],1,[[[R[2]],["self"]],[R[1]]]],[11,"index_to_node_num",E,"Panics `index` does not point to any node in this LOUDS.",1,[[["self"],[R[1]]],[R[2]]]],[11,"child_to_parent",E,"Panics - `index` does not point to any node in this LOUDS.…",1,[[["self"],[R[1]]],[R[2]]]],[11,"parent_to_children",E,R[3],1,[[[R[2]],["self"]],[[R[1]],["vec",[R[1]]]]]],[11,R[6],E,"Prepares for building Louds from LBS (LOUDS Bit vector).",2,[[[R[7]]],["self"]]],[11,"build",E,"Build Louds.",2,[[["self"]],["louds"]]],[11,"new",E,E,3,[[["u64"]],["self"]]],[11,"value",E,E,3,[[["self"]],["u64"]]],[11,"new",E,E,4,[[["u64"]],["self"]]],[11,"value",E,E,4,[[["self"]],["u64"]]],[0,"succinct_bit_vector",R[0],E,N,N],[3,R[23],R[17],"Succinct bit vector.",N,N],[3,R[24],E,"Builder of SuccinctBitVector.",N,N],[11,"access",E,"Returns `i`-th element of the `SuccinctBitVector`.",5,[[["self"],["u64"]],["bool"]]],[11,"rank",E,"Returns the number of 1 in [0, `i`] elements of the…",5,[[["self"],["u64"]],["u64"]]],[11,"rank0",E,"Returns the number of 0 in [0, `i`] elements of the…",5,[[["self"],["u64"]],["u64"]]],[11,"select",E,R[4],5,[[["self"],["u64"]],[[R[5],["u64"]],["u64"]]]],[11,"select0",E,R[4],5,[[["self"],["u64"]],[[R[5],["u64"]],["u64"]]]],[11,"from_length",E,"Prepares a bit vector of `length`, fulfilled with 0.",6,[[["u64"]],["self"]]],[11,R[6],E,"Prepares a bit vector from BitString representation.",6,[[[R[7]]],["self"]]],[11,"set_bit",E,"Set 1 to i-th bit.",6,[[["self"],["u64"]],["self"]]],[11,"add_bit",E,"Add '0' or '1' to current bit vector.",6,[[["self"],["bool"]],["self"]]],[11,"build",E,"Build SuccinctBitVector in O(N) time (where N is the…",6,[[["self"]],["succinctbitvector"]]],[11,"from",R[8],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[11],E,E,0,[[[U]],[R[9]]]],[11,R[12],E,E,0,[[],[R[9]]]],[11,R[13],E,E,0,[[["self"]],[T]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[R[16]]]],[11,"from",R[10],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[11],E,E,1,[[[U]],[R[9]]]],[11,R[12],E,E,1,[[],[R[9]]]],[11,R[13],E,E,1,[[["self"]],[T]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[R[16]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[11],E,E,2,[[[U]],[R[9]]]],[11,R[12],E,E,2,[[],[R[9]]]],[11,R[13],E,E,2,[[["self"]],[T]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[R[16]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[11],E,E,4,[[[U]],[R[9]]]],[11,R[12],E,E,4,[[],[R[9]]]],[11,R[13],E,E,4,[[["self"]],[T]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[R[16]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[11],E,E,3,[[[U]],[R[9]]]],[11,R[12],E,E,3,[[],[R[9]]]],[11,R[13],E,E,3,[[["self"]],[T]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[R[16]]]],[11,"from",R[17],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[11],E,E,5,[[[U]],[R[9]]]],[11,R[12],E,E,5,[[],[R[9]]]],[11,R[13],E,E,5,[[["self"]],[T]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[R[16]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[11],E,E,6,[[[U]],[R[9]]]],[11,R[12],E,E,6,[[],[R[9]]]],[11,R[13],E,E,6,[[["self"]],[T]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[14],E,E,6,[[["self"]],[R[16]]]],[11,"eq",R[10],E,4,[[[R[2]],["self"]],["bool"]]],[11,"ne",E,E,4,[[[R[2]],["self"]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"fmt",E,E,4,[[["self"],[R[18]]],[R[9]]]],[11,"fmt",E,E,3,[[["self"],[R[18]]],[R[9]]]]],"p":[[3,R[19]],[3,"Louds"],[3,R[20]],[3,R[21]],[3,R[22]],[3,R[23]],[3,R[24]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);